stages: 
  - build
  - test
  - sonar
  - package
  - deploy

# build:
#   image: python:3.11-bookworm
#   stage: build
#   environment: dev
#   tags:
#     - build
#     - deploy 
#   before_script: 
#     - apt-get update && apt-get install make
#   script:
#     - make venv
#   artifacts:
#     paths:
#       - venv/


# unit-test-job:
#   image: python:3.11-bookworm
#   stage: test
#   environment: dev
#   tags:
#     - build
#     - deploy 
#   before_script: 
#     - apt-get update && apt-get install make
#   script:
#     - make test
#   artifacts:
#     paths:
#       - coverage.xml


# sonarqube-check:
#   tags:
#     - build
#     - deploy
#   stage: sonar
#   environment: dev
#   image: 
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   dependencies:
#     - unit-test-job
#   script: 
#     - sonar-scanner -X -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN 
#   allow_failure: true


# build-image:
#   stage: package
#   environment: dev
#   tags:
#     - build
#     - deploy 
#   image: docker:20.10.16
#   services:
#     - docker:20.10.16-dind
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#     DOCKER_TLS_CERTDIR: ""
#   before_script:
#     - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
#   script:
#     - echo "Building the image..."
#     - docker build -t api .


# lint-test-job:
#   #image: python:3.11-bookworm
#   stage: test
#   environment: dev
#   tags:
#     - build
#     - deploy 
#   before_script: 
#     - apt-get update && apt-get install make
#   script: 
#     # - make venv && make lint-fix
#     - echo "Lint initiated"
#     - echo "lint complete"

deploy-job:
  stage: deploy
  environment: dev
  tags:
    - build
    - deploy 
  image: google/cloud-sdk:alpine
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - echo $GCP_SERVICE_KEY > gcloud-service-key.json # Google Cloud service accounts
    - gcloud auth activate-service-account --key-file gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud builds submit . --config=cloudbuild.yaml

  after_script:
    - rm /tmp/gcloud-service-key.json
